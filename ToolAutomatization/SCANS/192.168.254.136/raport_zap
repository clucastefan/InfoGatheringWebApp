Scanarea pentru vulnerabilitati web
[URL] http://192.168.254.136/dvwa

REZUMAT : 
     1	SQL Injection, RISK High (Medium), Nr. aparitii 1, Ref 3
     2	Cross Site Scripting (DOM Based), RISK High (Medium), Nr. aparitii 2, Ref 3
     3	X-Frame-Options Header Not Set, RISK Medium (Medium), Nr. aparitii 19, Ref 2
     4	Directory Browsing, RISK Medium (Medium), Nr. aparitii 5, Ref 2
     5	Absence of Anti-CSRF Tokens, RISK Low (Medium), Nr. aparitii 15, Ref 1
     6	Cookie Without SameSite Attribute, RISK Low (Medium), Nr. aparitii 5, Ref 1
     7	Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s), RISK Low (Medium), Nr. aparitii 30, Ref 1
     8	X-Content-Type-Options Header Missing, RISK Low (Medium), Nr. aparitii 28, Ref 1
     9	Cookie No HttpOnly Flag, RISK Low (Medium), Nr. aparitii 5, Ref 1
    10	Information Disclosure - Suspicious Comments, RISK Informational (Medium), Nr. aparitii 1, Ref 0
    
[ALERT] X-Frame-Options Header Not Set
  [riskcode] 2
  [riskdesc] Medium (Medium)
  [desc] X-Frame-Options header is not included in the HTTP response to protect against 'ClickJacking' attacks.
    
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/sqli/?Submit=Submit&id=ZAP
  [method] GET
  [param] X-Frame-Options
    
  [uri] http://192.168.254.136/dvwa/
  [method] GET
  [param] X-Frame-Options
    
  [method] GET
  [param] X-Frame-Options
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/xss_s/
  [method] POST
  [param] X-Frame-Options
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/xss_s/
  [method] GET
  [param] X-Frame-Options
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/fi/?page=include.php
  [method] GET
  [param] X-Frame-Options
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/exec/
  [method] POST
  [param] X-Frame-Options
    
  [uri] http://192.168.254.136/dvwa/login.php
  [method] GET
  [param] X-Frame-Options
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/upload/
  [method] POST
  [param] X-Frame-Options
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/exec/
  [method] GET
  [param] X-Frame-Options
    
  [uri] http://192.168.254.136/dvwa
  [method] GET
  [param] X-Frame-Options
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/upload/
  [method] GET
  [param] X-Frame-Options
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/xss_r/
  [method] GET
  [param] X-Frame-Options
    
  [method] GET
  [param] X-Frame-Options
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/sqli/
  [method] GET
  [param] X-Frame-Options
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/sqli_blind/
  [method] GET
  [param] X-Frame-Options
    
  [uri] http://192.168.254.136/dvwa/security.php
  [method] GET
  [param] X-Frame-Options
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/sqli_blind/?Submit=Submit&id=ZAP
  [method] GET
  [param] X-Frame-Options
    
  [uri] http://192.168.254.136/dvwa/setup.php
  [method] GET
  [param] X-Frame-Options
  [count] 19
    
[ALERT] Absence of Anti-CSRF Tokens
  [riskcode] 1
  [riskdesc] Low (Medium)
    
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/exec/
  [method] GET
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/exec/
  [method] POST
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/xss_r/
  [method] GET
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/sqli_blind/?Submit=Submit&id=ZAP
  [method] GET
  [evidence] <form action="#" method="GET">
    
  [uri] http://192.168.254.136/dvwa/security.php
  [method] GET
  [evidence] <form action="#" method="POST">
    
  [uri] http://192.168.254.136/dvwa/setup.php
  [method] GET
  [evidence] <form action="#" method="post">
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/sqli/?Submit=Submit&id=ZAP
  [method] GET
  [evidence] <form action="#" method="GET">
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/xss_s/
  [method] POST
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/upload/
  [method] GET
  [evidence] <form enctype="multipart/form-data" action="#" method="POST" />
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/upload/
  [method] POST
  [evidence] <form enctype="multipart/form-data" action="#" method="POST" />
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/sqli/
  [method] GET
  [evidence] <form action="#" method="GET">
    
  [uri] http://192.168.254.136/dvwa/login.php
  [method] GET
  [evidence] <form action="login.php" method="post">
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/xss_s/
  [method] GET
    
  [method] GET
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/sqli_blind/
  [method] GET
  [evidence] <form action="#" method="GET">
  [count] 15
  [otherinfo] No known Anti-CSRF token [anticsrf, CSRFToken, __RequestVerificationToken, csrfmiddlewaretoken, authenticity_token, OWASP_CSRFTOKEN, anoncsrf, csrf_token, _csrf, _csrfSecret, __csrf_magic, CSRF] was found in the following HTML form: [Form 1: "ip" "submit" ].
    
[ALERT] Cookie Without SameSite Attribute
  [riskcode] 1
  [riskdesc] Low (Medium)
    
    
  [uri] http://192.168.254.136/dvwa
  [method] GET
  [param] PHPSESSID
  [evidence] Set-Cookie: PHPSESSID
    
  [uri] http://192.168.254.136/dvwa/
  [method] GET
  [param] PHPSESSID
  [evidence] Set-Cookie: PHPSESSID
    
  [uri] http://192.168.254.136/dvwa/security.php
  [method] POST
  [param] security
  [evidence] Set-Cookie: security
    
  [uri] http://192.168.254.136/dvwa
  [method] GET
  [param] security
  [evidence] Set-Cookie: security
    
  [uri] http://192.168.254.136/dvwa/
  [method] GET
  [param] security
  [evidence] Set-Cookie: security
  [count] 5
  [solution] Ensure that the SameSite attribute is set to either 'lax' or ideally 'strict' for all cookies.
    
[ALERT] Server Leaks Information via "X-Powered-By" HTTP Response Header Field(s)
  [riskcode] 1
  [riskdesc] Low (Medium)
  [desc] The web/application server is leaking information via one or more "X-Powered-By" HTTP response headers. Access to such information may facilitate attackers identifying other frameworks/components your web application is reliant upon and the vulnerabilities such components may be subject to.
    
    
  [method] GET
  [evidence] X-Powered-By: PHP/5.2.4-2ubuntu5.10
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/csrf/
  [method] GET
  [evidence] X-Powered-By: PHP/5.2.4-2ubuntu5.10
    
  [uri] http://192.168.254.136/dvwa/setup.php
  [method] POST
  [evidence] X-Powered-By: PHP/5.2.4-2ubuntu5.10
    
  [uri] http://192.168.254.136/dvwa/ids_log.php
  [method] GET
  [evidence] X-Powered-By: PHP/5.2.4-2ubuntu5.10
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/fi/?page=include.php
  [method] GET
  [evidence] X-Powered-By: PHP/5.2.4-2ubuntu5.10
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/exec/
  [method] POST
  [evidence] X-Powered-By: PHP/5.2.4-2ubuntu5.10
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/sqli/?Submit=Submit&id=ZAP
  [method] GET
  [evidence] X-Powered-By: PHP/5.2.4-2ubuntu5.10
    
  [uri] http://192.168.254.136/dvwa/setup.php
  [method] GET
  [evidence] X-Powered-By: PHP/5.2.4-2ubuntu5.10
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/exec/
  [method] GET
  [evidence] X-Powered-By: PHP/5.2.4-2ubuntu5.10
    
  [uri] http://192.168.254.136/dvwa/phpinfo.php
  [method] GET
  [evidence] X-Powered-By: PHP/5.2.4-2ubuntu5.10
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/brute/
  [method] GET
  [evidence] X-Powered-By: PHP/5.2.4-2ubuntu5.10
    
  [uri] http://192.168.254.136/dvwa/security.php
  [method] POST
  [evidence] X-Powered-By: PHP/5.2.4-2ubuntu5.10
    
  [uri] http://192.168.254.136/dvwa/security.php
  [method] GET
  [evidence] X-Powered-By: PHP/5.2.4-2ubuntu5.10
    
  [uri] http://192.168.254.136/dvwa/security.php?phpids=on
  [method] GET
  [evidence] X-Powered-By: PHP/5.2.4-2ubuntu5.10
    
  [uri] http://192.168.254.136/dvwa/login.php
  [method] GET
  [evidence] X-Powered-By: PHP/5.2.4-2ubuntu5.10
    
  [uri] http://192.168.254.136/dvwa/about.php
  [method] GET
  [evidence] X-Powered-By: PHP/5.2.4-2ubuntu5.10
    
  [uri] http://192.168.254.136/dvwa/logout.php
  [method] GET
  [evidence] X-Powered-By: PHP/5.2.4-2ubuntu5.10
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/sqli_blind/
  [method] GET
  [evidence] X-Powered-By: PHP/5.2.4-2ubuntu5.10
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/upload/
  [method] GET
  [evidence] X-Powered-By: PHP/5.2.4-2ubuntu5.10
    
  [uri] http://192.168.254.136/dvwa
  [method] GET
  [evidence] X-Powered-By: PHP/5.2.4-2ubuntu5.10
  [count] 30
  [solution] Ensure that your web server, application server, load balancer, etc. is configured to suppress "X-Powered-By" headers.
    
[ALERT] X-Content-Type-Options Header Missing
  [riskcode] 1
  [riskdesc] Low (Medium)
  [desc] The Anti-MIME-Sniffing header X-Content-Type-Options was not set to 'nosniff'. This allows older versions of Internet Explorer and Chrome to perform MIME-sniffing on the response body, potentially causing the response body to be interpreted and displayed as a content type other than the declared content type. Current (early 2014) and legacy versions of Firefox will use the declared content type (if one is set), rather than performing MIME-sniffing.
    
    
  [uri] http://192.168.254.136/dvwa/dvwa/images/lock.png
  [method] GET
  [param] X-Content-Type-Options
    
  [uri] http://192.168.254.136/dvwa/security.php
  [method] GET
  [param] X-Content-Type-Options
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/xss_r/
  [method] GET
  [param] X-Content-Type-Options
    
  [uri] http://192.168.254.136/dvwa/dvwa/images/logo.png
  [method] GET
  [param] X-Content-Type-Options
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/sqli/
  [method] GET
  [param] X-Content-Type-Options
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/sqli_blind/
  [method] GET
  [param] X-Content-Type-Options
    
  [uri] http://192.168.254.136/dvwa/dvwa/images/RandomStorm.png
  [method] GET
  [param] X-Content-Type-Options
    
  [uri] http://192.168.254.136/dvwa/dvwa/css/login.css
  [method] GET
  [param] X-Content-Type-Options
    
  [uri] http://192.168.254.136/dvwa/dvwa/css/main.css
  [method] GET
  [param] X-Content-Type-Options
    
  [uri] http://192.168.254.136/dvwa/setup.php
  [method] GET
  [param] X-Content-Type-Options
    
  [method] GET
  [param] X-Content-Type-Options
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/sqli_blind/?Submit=Submit&id=ZAP
  [method] GET
  [param] X-Content-Type-Options
    
  [uri] http://192.168.254.136/dvwa/dvwa/js/dvwaPage.js
  [method] GET
  [param] X-Content-Type-Options
    
  [uri] http://192.168.254.136/dvwa/
  [method] GET
  [param] X-Content-Type-Options
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/upload/
  [method] POST
  [param] X-Content-Type-Options
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/sqli/?Submit=Submit&id=ZAP
  [method] GET
  [param] X-Content-Type-Options
    
  [uri] http://192.168.254.136/dvwa/favicon.ico
  [method] GET
  [param] X-Content-Type-Options
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/xss_s/
  [method] POST
  [param] X-Content-Type-Options
    
  [uri] http://192.168.254.136/dvwa/login.php
  [method] GET
  [param] X-Content-Type-Options
    
  [uri] http://192.168.254.136/dvwa/dvwa/images/login_logo.png
  [method] GET
  [param] X-Content-Type-Options
  [count] 28
  [solution] Ensure that the application/web server sets the Content-Type header appropriately, and that it sets the X-Content-Type-Options header to 'nosniff' for all web pages.If possible, ensure that the end user uses a standards-compliant and modern web browser that does not perform MIME-sniffing at all, or that can be directed by the web application/web server to not perform MIME-sniffing.
  [otherinfo] This issue still applies to error type pages (401, 403, 500, etc.) as those pages are often still affected by injection issues, in which case there is still concern for browsers sniffing pages away from their actual content type.At "High" threshold this scan rule will not alert on client or server error responses.
    
[ALERT] SQL Injection
  [riskcode] 3
  [riskdesc] High (Medium)
  [desc] SQL injection may be possible.
    
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/upload/
  [method] POST
  [param] MAX_FILE_SIZE
  [attack] 100000 OR 1=1
  [count] 1
  [solution] Do not trust client side input, even if there is client side validation in place.  In general, type check all data on the server side.If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.If database Stored Procedures can be used, use them.Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality!Do not create dynamic SQL queries using simple string concatenation.Escape all data received from the client.Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.Apply the principle of least privilege by using the least privileged database user possible.In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.Grant the minimum database access that is necessary for the application.
  [otherinfo] The page results were successfully manipulated using the boolean conditions [100000 AND 1=1] and [100000 OR 1=1]The parameter value being modified was NOT stripped from the HTML output for the purposes of the comparisonData was NOT returned for the original parameter.The vulnerability was detected by successfully retrieving more data than originally returned, by manipulating the parameter
    
[ALERT] Cookie No HttpOnly Flag
  [riskcode] 1
  [riskdesc] Low (Medium)
    
    
  [uri] http://192.168.254.136/dvwa/security.php
  [method] POST
  [param] security
  [evidence] Set-Cookie: security
    
  [uri] http://192.168.254.136/dvwa
  [method] GET
  [param] PHPSESSID
  [evidence] Set-Cookie: PHPSESSID
    
  [uri] http://192.168.254.136/dvwa/
  [method] GET
  [param] PHPSESSID
  [evidence] Set-Cookie: PHPSESSID
    
  [uri] http://192.168.254.136/dvwa
  [method] GET
  [param] security
  [evidence] Set-Cookie: security
    
  [uri] http://192.168.254.136/dvwa/
  [method] GET
  [param] security
  [evidence] Set-Cookie: security
  [count] 5
  [solution] Ensure that the HttpOnly flag is set for all cookies.
    
[ALERT] Cross Site Scripting (DOM Based)
  [riskcode] 3
  [riskdesc] High (Medium)
    
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/xss_s/#jaVasCript:/*-/*`/*\`/*'/*"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\x3csVg/<sVg/oNloAd=alert()//>\x3e
  [method] GET
  [attack] #jaVasCript:/*-/*`/*\`/*'/*"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\x3csVg/<sVg/oNloAd=alert()//>\x3e
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/xss_s/#jaVasCript:/*-/*`/*\`/*'/*"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\x3csVg/<sVg/oNloAd=alert()//>\x3e
  [method] POST
  [attack] #jaVasCript:/*-/*`/*\`/*'/*"/**/(/* */oNcliCk=alert() )//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/--!>\x3csVg/<sVg/oNloAd=alert()//>\x3e
  [count] 2
  [solution] Phase: Architecture and DesignUse a vetted library or framework that does not allow this weakness to occur or provides constructs that make this weakness easier to avoid.Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.Phases: Implementation; Architecture and DesignUnderstand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.Consult the XSS Prevention Cheat Sheet for more details on the types of encoding and escaping that are needed.Phase: Architecture and DesignFor any security checks that are performed on the client side, ensure that these checks are duplicated on the server side, in order to avoid CWE-602. Attackers can bypass the client-side checks by modifying values after the checks have been performed, or by changing the client to remove the client-side checks entirely. Then, these modified values would be submitted to the server.If available, use structured mechanisms that automatically enforce the separation between data and code. These mechanisms may be able to provide the relevant quoting, encoding, and validation automatically, instead of relying on the developer to provide this capability at every point where output is generated.Phase: ImplementationFor every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.Assume all input is malicious. Use an "accept known good" input validation strategy, i.e., use an allow list of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on looking for malicious or malformed inputs (i.e., do not rely on a deny list). However, deny lists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, "boat" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as "red" or "blue."Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.
    
[ALERT] Directory Browsing
  [riskcode] 2
  [riskdesc] Medium (Medium)
  [desc] It is possible to view the directory listing.  Directory listing may reveal hidden scripts, include files, backup source files, etc. which can be accessed to read sensitive information.
    
    
  [uri] http://192.168.254.136/dvwa/dvwa/js/
  [method] GET
  [attack] Parent Directory
    
  [uri] http://192.168.254.136/dvwa/dvwa/css/
  [method] GET
  [attack] Parent Directory
    
  [uri] http://192.168.254.136/dvwa/dvwa/images/
  [method] GET
  [attack] Parent Directory
    
  [uri] http://192.168.254.136/dvwa/dvwa/
  [method] GET
  [attack] Parent Directory
    
  [uri] http://192.168.254.136/dvwa/vulnerabilities/
  [method] GET
  [attack] Parent Directory
  [count] 5
  [solution] Disable directory browsing.  If this is required, make sure the listed files does not induce risks.
    
[ALERT] Information Disclosure - Suspicious Comments
  [riskcode] 0
  [riskdesc] Informational (Medium)
  [desc] The response appears to contain suspicious comments which may help an attacker. Note: Matches made within script blocks or files are against the entire content not only comments.
    
    
  [uri] http://192.168.254.136/dvwa/setup.php
  [method] GET
  [count] 1
  [solution] Remove all comments that return information that may help an attacker and fix any underlying problems they refer to.
  [otherinfo] The following comment/snippet was identified via the pattern: \bDB\b<!-- Create db button -->
