{"ast":null,"code":"var _jsxFileName = \"/home/cluca/Documents/Licenta/WebApplication/frontend/src/main/pages/Auth.js\";\nimport React, { useState, useContext } from 'react';\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useHttpClient } from '../../shared/hooks/context/http-hook';\nimport './Auth.css';\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true); // const [isLoading, setIsLoading] = useState(false);\n  // const [error, setError]  = useState(false);\n\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [formState, inputHandler, setFormData] = useForm({\n    email: {\n      value: '',\n      isValid: false\n    },\n    password: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData({ ...formState.inputs,\n        name: undefined\n      }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n    } else {\n      setFormData({ ...formState.inputs,\n        name: {\n          value: '',\n          isValid: false\n        }\n      }, false);\n    }\n\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const authSubmiteHandler = async event => {\n    event.preventDefault(); //setIsLoading(true);\n\n    if (isLoginMode) {\n      try {\n        await sendRequest('http://localhost:5000/api/users/login', 'POST', JSON.stringify({\n          email: formState.inputs.email.value,\n          password: formState.inputs.password.value\n        }), {\n          'Content-Type': 'application/json'\n        });\n        auth.login();\n      } catch (err) {}\n    } else {\n      try {\n        await sendRequest('http://localhost:5000/api/users/signup', 'POST', JSON.stringify({\n          name: formState.inputs.name.value,\n          email: formState.inputs.email.value,\n          password: formState.inputs.password.value\n        }), {\n          'Content-Type': 'application/json'\n        });\n        auth.login();\n      } catch (err) {}\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Card, {\n    className: \"authentication\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }, isLoading && /*#__PURE__*/React.createElement(LoadingSpinner, {\n    asOverlay: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, \"Login required\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: authSubmiteHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, !isLoginMode && /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"name\",\n    type: \"text\",\n    label: \"Username\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Trebuie sa alegi un nume de utilizator.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"email\",\n    type: \"email\",\n    label: \"E-Mail\",\n    validators: [VALIDATOR_EMAIL()],\n    errorText: \"Trebuie sa introduci o adresa de email valida.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"password\",\n    type: \"password\",\n    label: \"Password\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Parola trebuie sa aiba minim 5 caractere.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }, isLoginMode ? 'LOGIN' : 'SIGNUP')), /*#__PURE__*/React.createElement(Button, {\n    danger: true,\n    onClick: switchModeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }\n  }, \"SWITCH TO \", isLoginMode ? 'SIGNUP' : 'LOGIN')));\n};\n\nexport default Auth;","map":{"version":3,"sources":["/home/cluca/Documents/Licenta/WebApplication/frontend/src/main/pages/Auth.js"],"names":["React","useState","useContext","Card","Input","Button","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","useForm","AuthContext","ErrorModal","LoadingSpinner","useHttpClient","Auth","auth","isLoginMode","setIsLoginMode","isLoading","error","sendRequest","clearError","formState","inputHandler","setFormData","email","value","isValid","password","switchModeHandler","inputs","name","undefined","prevMode","authSubmiteHandler","event","preventDefault","JSON","stringify","login","err"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AAEA,OAAOC,IAAP,MAAiB,yCAAjB;AACA,OAAOC,KAAP,MAAkB,4CAAlB;AACA,OAAOC,MAAP,MAAmB,6CAAnB;AACA,SAAQC,eAAR,EAAyBC,mBAAzB,EAA8CC,iBAA9C,QAAsE,8BAAtE;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,SAASC,WAAT,QAA4B,mCAA5B;AACA,OAAOC,UAAP,MAAuB,+CAAvB;AACA,OAAOC,cAAP,MAA2B,mDAA3B;AACA,SAASC,aAAT,QAA8B,sCAA9B;AACA,OAAO,YAAP;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAMC,IAAI,GAAGb,UAAU,CAACQ,WAAD,CAAvB;AAEA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgChB,QAAQ,CAAC,IAAD,CAA9C,CAHe,CAIf;AACA;;AAEA,QAAM;AAACiB,IAAAA,SAAD;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA,WAAnB;AAAgCC,IAAAA;AAAhC,MAA8CR,aAAa,EAAjE;AAEA,QAAM,CAACS,SAAD,EAAYC,YAAZ,EAA0BC,WAA1B,IAAyCf,OAAO,CAAC;AACnDgB,IAAAA,KAAK,EAAE;AACHC,MAAAA,KAAK,EAAE,EADJ;AAEHC,MAAAA,OAAO,EAAE;AAFN,KAD4C;AAKnDC,IAAAA,QAAQ,EAAE;AACNF,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,OAAO,EAAE;AAFH;AALyC,GAAD,EASnD,KATmD,CAAtD;;AAWA,QAAME,iBAAiB,GAAG,MAAM;AAC5B,QAAG,CAACb,WAAJ,EAAgB;AACZQ,MAAAA,WAAW,CAAC,EACR,GAAGF,SAAS,CAACQ,MADL;AAERC,QAAAA,IAAI,EAAEC;AAFE,OAAD,EAGRV,SAAS,CAACQ,MAAV,CAAiBL,KAAjB,CAAuBE,OAAvB,IAAkCL,SAAS,CAACQ,MAAV,CAAiBF,QAAjB,CAA0BD,OAHpD,CAAX;AAIH,KALD,MAMK;AACDH,MAAAA,WAAW,CAAC,EACR,GAAGF,SAAS,CAACQ,MADL;AAERC,QAAAA,IAAI,EAAG;AACHL,UAAAA,KAAK,EAAE,EADJ;AAEHC,UAAAA,OAAO,EAAE;AAFN;AAFC,OAAD,EAMR,KANQ,CAAX;AAOH;;AACDV,IAAAA,cAAc,CAACgB,QAAQ,IAAI,CAACA,QAAd,CAAd;AACH,GAjBD;;AAmBA,QAAMC,kBAAkB,GAAG,MAAMC,KAAN,IAAe;AACtCA,IAAAA,KAAK,CAACC,cAAN,GADsC,CAGtC;;AAEA,QAAGpB,WAAH,EAAe;AACX,UAAI;AACA,cAAMI,WAAW,CAAC,uCAAD,EACG,MADH,EAEGiB,IAAI,CAACC,SAAL,CAAe;AACXb,UAAAA,KAAK,EAAEH,SAAS,CAACQ,MAAV,CAAiBL,KAAjB,CAAuBC,KADnB;AAEXE,UAAAA,QAAQ,EAAEN,SAAS,CAACQ,MAAV,CAAiBF,QAAjB,CAA0BF;AAFzB,SAAf,CAFH,EAMG;AACI,0BAAiB;AADrB,SANH,CAAjB;AASAX,QAAAA,IAAI,CAACwB,KAAL;AACH,OAXD,CAWE,OAAOC,GAAP,EAAY,CAAE;AACnB,KAbD,MAaO;AACH,UAAI;AACA,cAAMpB,WAAW,CAAC,wCAAD,EACjB,MADiB,EAEjBiB,IAAI,CAACC,SAAL,CAAe;AACXP,UAAAA,IAAI,EAAET,SAAS,CAACQ,MAAV,CAAiBC,IAAjB,CAAsBL,KADjB;AAEXD,UAAAA,KAAK,EAAEH,SAAS,CAACQ,MAAV,CAAiBL,KAAjB,CAAuBC,KAFnB;AAGXE,UAAAA,QAAQ,EAAEN,SAAS,CAACQ,MAAV,CAAiBF,QAAjB,CAA0BF;AAHzB,SAAf,CAFiB,EAOjB;AACI,0BAAgB;AADpB,SAPiB,CAAjB;AAUAX,QAAAA,IAAI,CAACwB,KAAL;AACH,OAZD,CAYE,OAAOC,GAAP,EAAW,CAAE;AAClB;AACJ,GAjCD;;AAmCA,sBAAS,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACL,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAErB,KAAnB;AAA0B,IAAA,OAAO,EAAEE,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,eAEL,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCH,SAAS,iBAAI,oBAAC,cAAD;AAAgB,IAAA,SAAS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADd,eAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFA,eAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHA,eAIA;AAAM,IAAA,QAAQ,EAAEgB,kBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAAClB,WAAD,iBACG,oBAAC,KAAD;AACI,IAAA,OAAO,EAAC,OADZ;AAEI,IAAA,EAAE,EAAC,MAFP;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,KAAK,EAAC,UAJV;AAKI,IAAA,UAAU,EAAE,CAACR,iBAAiB,EAAlB,CALhB;AAMI,IAAA,SAAS,EAAC,yCANd;AAOI,IAAA,OAAO,EAAEe,YAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFR,eAWI,oBAAC,KAAD;AACI,IAAA,OAAO,EAAC,OADZ;AAEI,IAAA,EAAE,EAAC,OAFP;AAGI,IAAA,IAAI,EAAC,OAHT;AAII,IAAA,KAAK,EAAC,QAJV;AAKI,IAAA,UAAU,EAAE,CAACjB,eAAe,EAAhB,CALhB;AAMI,IAAA,SAAS,EAAC,gDANd;AAOI,IAAA,OAAO,EAAEiB,YAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,eAmBI,oBAAC,KAAD;AACI,IAAA,OAAO,EAAC,OADZ;AAEI,IAAA,EAAE,EAAC,UAFP;AAGI,IAAA,IAAI,EAAC,UAHT;AAII,IAAA,KAAK,EAAC,UAJV;AAKI,IAAA,UAAU,EAAE,CAAChB,mBAAmB,CAAC,CAAD,CAApB,CALhB;AAMI,IAAA,SAAS,EAAC,2CANd;AAOI,IAAA,OAAO,EAAEgB,YAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBJ,eA2BI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAE,CAACD,SAAS,CAACK,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKX,WAAW,GAAG,OAAH,GAAa,QAD7B,CA3BJ,CAJA,eAmCI,oBAAC,MAAD;AAAQ,IAAA,MAAM,MAAd;AAAe,IAAA,OAAO,EAAEa,iBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACeb,WAAW,GAAG,QAAH,GAAc,OADxC,CAnCJ,CAFK,CAAT;AA0CH,CApHD;;AAsHA,eAAeF,IAAf","sourcesContent":["import React, { useState, useContext } from 'react'\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button'\nimport {VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useHttpClient } from '../../shared/hooks/context/http-hook';\nimport './Auth.css'\n\nconst Auth = () => {\n    const auth = useContext(AuthContext);\n\n    const [isLoginMode, setIsLoginMode] = useState(true);\n    // const [isLoading, setIsLoading] = useState(false);\n    // const [error, setError]  = useState(false);\n\n    const {isLoading, error, sendRequest, clearError} = useHttpClient();\n\n    const [formState, inputHandler, setFormData] = useForm({\n        email: {\n            value: '',\n            isValid: false\n        },\n        password: {\n            value: '',\n            isValid: false\n        }\n    }, false);\n\n    const switchModeHandler = () => {\n        if(!isLoginMode){\n            setFormData({\n                ...formState.inputs,\n                name: undefined\n            }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n        }\n        else {\n            setFormData({\n                ...formState.inputs,\n                name : {\n                    value: '',\n                    isValid: false\n                }\n            }, false)\n        }\n        setIsLoginMode(prevMode => !prevMode);\n    };\n\n    const authSubmiteHandler = async event => {\n        event.preventDefault();\n\n        //setIsLoading(true);\n        \n        if(isLoginMode){\n            try {\n                await sendRequest('http://localhost:5000/api/users/login',\n                                    'POST',\n                                    JSON.stringify({\n                                        email: formState.inputs.email.value,\n                                        password: formState.inputs.password.value\n                                    }),\n                                    {\n                                        'Content-Type' : 'application/json'\n                                    });\n                auth.login();\n            } catch (err) {}\n        } else {\n            try {\n                await sendRequest('http://localhost:5000/api/users/signup',\n                'POST',\n                JSON.stringify({\n                    name: formState.inputs.name.value,\n                    email: formState.inputs.email.value,\n                    password: formState.inputs.password.value\n                    }),\n                {\n                    'Content-Type': 'application/json'\n                });      \n                auth.login();\n            } catch (err){}\n        }\n    };\n\n    return ( <React.Fragment>\n        <ErrorModal error={error} onClear={clearError}/>\n        <Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOverlay/>}\n        <h2>Login required</h2>\n        <hr />\n        <form onSubmit={authSubmiteHandler}>\n            {!isLoginMode && (\n                <Input\n                    element=\"input\"\n                    id=\"name\"\n                    type=\"text\"\n                    label=\"Username\"\n                    validators={[VALIDATOR_REQUIRE()]}\n                    errorText=\"Trebuie sa alegi un nume de utilizator.\"\n                    onInput={inputHandler}/>\n            )}\n            <Input \n                element=\"input\" \n                id=\"email\" \n                type=\"email\"\n                label=\"E-Mail\" \n                validators={[VALIDATOR_EMAIL()]}\n                errorText=\"Trebuie sa introduci o adresa de email valida.\"\n                onInput={inputHandler}/>\n            <Input \n                element=\"input\" \n                id=\"password\" \n                type=\"password\"\n                label=\"Password\" \n                validators={[VALIDATOR_MINLENGTH(5)]}\n                errorText=\"Parola trebuie sa aiba minim 5 caractere.\"\n                onInput={inputHandler}/>\n            <Button type=\"submit\" disabled={!formState.isValid}>\n                {isLoginMode ? 'LOGIN' : 'SIGNUP'}\n            </Button>\n            </form>\n            <Button danger onClick={switchModeHandler}>\n                SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n            </Button>\n        </Card>\n        </React.Fragment> );\n};\n\nexport default Auth;"]},"metadata":{},"sourceType":"module"}