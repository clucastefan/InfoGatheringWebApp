{"ast":null,"code":"var _jsxFileName = \"/home/cluca/Documents/Licenta/WebApplication/frontend/src/shared/components/FormElements/Input.js\";\nimport React, { useReducer, useEffect } from 'react';\nimport './Input.css';\nimport { validate } from '../../util/validators';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return { ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n\n    case 'TOUCH':\n      {\n        return { ...state,\n          isTouched: true\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.value || '',\n    isTouched: false,\n    isValid: props.valid || false\n  });\n  const {\n    id,\n    onInput\n  } = props;\n  const {\n    value,\n    isValid\n  } = inputState;\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  const element = props.element === 'input' ? /*#__PURE__*/React.createElement(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }\n  }) : /*#__PURE__*/React.createElement(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: props.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, props.label), element, !inputState.isValid && inputState.isTouched && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 57\n    }\n  }, props.errorText));\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/cluca/Documents/Licenta/WebApplication/frontend/src/shared/components/FormElements/Input.js"],"names":["React","useReducer","useEffect","validate","inputReducer","state","action","type","value","val","isValid","validators","isTouched","Input","props","inputState","dispatch","valid","id","onInput","changeHandler","event","target","touchHandler","element","placeholder","rows","label","errorText"],"mappings":"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","sourcesContent":["import React,{ useReducer, useEffect } from 'react';\n\nimport './Input.css'\nimport { validate } from '../../util/validators';\n\nconst inputReducer = (state, action) => {\n    switch(action.type){\n        case 'CHANGE':\n            return {\n                ...state,\n                value: action.val,\n                isValid: validate(action.val, action.validators)\n            };\n        case 'TOUCH':{\n            return {\n                ...state,\n                isTouched: true\n            }\n        }\n        default:\n            return state;\n    }\n};\n\nconst Input = props => {\n    const [inputState,dispatch] = useReducer(inputReducer, {value: props.value || '', isTouched: false, isValid: props.valid || false});\n\n    const { id, onInput } = props;\n    const { value, isValid } = inputState;\n\n    useEffect(() => {\n        onInput(id, value, isValid)\n    }, [id, value, isValid, onInput]);\n\n    const changeHandler = event => {\n        dispatch({type: 'CHANGE', val: event.target.value, validators: props.validators});\n    };\n\n    const touchHandler = () => {\n        dispatch({\n            type: 'TOUCH'\n        });\n    };\n\n    const element = props.element === 'input' ? \n    ( <input \n        id={props.id} \n        type={props.type} \n        placeholder={props.placeholder} \n        onChange={changeHandler} \n        onBlur={touchHandler} \n        value={inputState.value}/> ) \n    : ( <textarea \n        id={props.id} \n        rows={props.rows || 3 } \n        onChange={changeHandler} \n        onBlur={touchHandler} \n        value={inputState.value}/>)\n\n    return <div className={`form-control ${!inputState.isValid && inputState.isTouched && 'form-control--invalid'}`}>\n        <label htmlFor={props.id}>{props.label}</label>\n        {element}\n        {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\n    </div>\n};\n\nexport default Input;"]},"metadata":{},"sourceType":"module"}