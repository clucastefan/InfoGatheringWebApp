{"ast":null,"code":"var _jsxFileName = \"/home/cluca/Documents/Licenta/WebApplication/frontend/src/scans/pages/UpdateScan.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport './ScanForm.css';\nimport Card from '../../shared/components/UIElements/Card';\nimport { useHttpClient } from '../../shared/context/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\n\nconst UpdateScan = () => {\n  const auth = useContext(AuthContext);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedScan, setLoadedScan] = useState(); // const [isLoading, setIsLoading] = useState(true);\n\n  const scanId = useParams().scanId;\n  const userId = useParams().userId;\n  const [formState, inputHandler, setFormData] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    descriere: {\n      value: '',\n      isValid: false\n    },\n    ipdns: {\n      value: '',\n      isValid: false\n    },\n    tipScan: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  useEffect(() => {\n    const fetchScan = async () => {\n      try {\n        const responseData = await sendRequest(`http://localhost:5000/api/reports/${userId}/myscans/${scanId}`);\n        setLoadedScan(responseData.scan);\n        setFormData({\n          title: {\n            value: responseData.scan.titlu,\n            isValid: true\n          },\n          descriere: {\n            value: responseData.scan.descriere,\n            isValid: true\n          },\n          ipdns: {\n            value: responseData.scan.addr,\n            isValid: true\n          },\n          tipScan: {\n            value: responseData.scan.tipScan,\n            isValid: true\n          }\n        }, true);\n      } catch (err) {}\n    };\n\n    fetchScan();\n  }, [sendRequest, userId, scanId, setFormData]);\n\n  const scanUpdateSubmitHandler = event => {\n    event.preventDefault();\n    console.log(formState.inputs);\n  };\n\n  if (!loadedScan && !error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }\n    }, \"Nu s-a putut gasi raportul respectiv\")));\n  }\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"place-form\",\n    onSubmit: scanUpdateSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"ipdns\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"RAPORT: \", formState.inputs.ipdns.value), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"tipscan\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"TIP SCANARE: \", formState.inputs.tipScan.value), /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Titlu\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Trebuie introdus un titlu valid.\",\n    onInput: inputHandler,\n    value: formState.inputs.title.value,\n    valid: formState.inputs.title.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"descriere\",\n    element: \"textarea\",\n    label: \"Descriere\",\n    validators: [VALIDATOR_MINLENGTH(1)],\n    errorText: \"Trebuie adaugata o descriere scurta.\",\n    onInput: inputHandler,\n    value: formState.inputs.descriere.value,\n    valid: formState.inputs.descriere.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, \"RESCAN\")));\n};\n\nexport default UpdateScan;","map":{"version":3,"sources":["/home/cluca/Documents/Licenta/WebApplication/frontend/src/scans/pages/UpdateScan.js"],"names":["React","useEffect","useState","useParams","Input","Button","LoadingSpinner","ErrorModal","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","Card","useHttpClient","AuthContext","UpdateScan","auth","useContext","isLoading","error","sendRequest","clearError","loadedScan","setLoadedScan","scanId","userId","formState","inputHandler","setFormData","title","value","isValid","descriere","ipdns","tipScan","fetchScan","responseData","scan","titlu","addr","err","scanUpdateSubmitHandler","event","preventDefault","console","log","inputs"],"mappings":"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","sourcesContent":["import React, { useEffect,useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport './ScanForm.css'\nimport Card from '../../shared/components/UIElements/Card';\nimport { useHttpClient } from '../../shared/context/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\n\n\nconst UpdateScan = () => {\n    const auth = useContext(AuthContext);\n\n    const {isLoading, error, sendRequest, clearError} = useHttpClient();\n    const[loadedScan, setLoadedScan] = useState();\n    // const [isLoading, setIsLoading] = useState(true);\n    const scanId = useParams().scanId;\n    const userId = useParams().userId;\n\n    const [formState, inputHandler, setFormData] = useForm({\n        title: {\n            value: '',\n            isValid: false\n        },\n        descriere: {\n            value: '',\n            isValid: false\n        },\n        ipdns: {\n            value: '',\n            isValid: false\n        },\n        tipScan: {\n            value: '',\n            isValid: false\n        }     \n    },false);\n\n    useEffect(() => {\n        const fetchScan = async () => {\n            try {\n                const responseData = await sendRequest(`http://localhost:5000/api/reports/${userId}/myscans/${scanId}`);\n                setLoadedScan(responseData.scan);\n                setFormData({\n                    title: {\n                        value: responseData.scan.titlu,\n                        isValid: true\n                    },\n                    descriere: {\n                        value: responseData.scan.descriere,\n                        isValid: true\n                    },\n                    ipdns: {\n                        value: responseData.scan.addr,\n                        isValid: true\n                    },\n                    tipScan: {\n                        value: responseData.scan.tipScan,\n                        isValid: true\n                    }\n                }, true);\n            } catch (err) {}\n        };\n        fetchScan();\n    }, [sendRequest, userId, scanId, setFormData]);\n\n    const scanUpdateSubmitHandler = event => {\n        event.preventDefault();\n        console.log(formState.inputs);\n    };\n\n    if(!loadedScan && !error ){\n        return <div className=\"center\">\n            <Card>\n                <h2>Nu s-a putut gasi raportul respectiv</h2>\n            </Card>\n            </div>\n    }\n\n    if(isLoading){\n        return <div className=\"center\">\n            <LoadingSpinner/>\n            </div>\n    }\n\n    return (\n        <React.Fragment>\n        <ErrorModal error={error} onClear={clearError} />\n        <form className=\"place-form\" onSubmit={scanUpdateSubmitHandler}>\n        <label className=\"ipdns\">RAPORT: {(formState.inputs.ipdns.value)}</label>\n        <label className=\"tipscan\">TIP SCANARE: {(formState.inputs.tipScan.value)}</label>\n        <Input \n            id=\"title\" \n            element=\"input\" \n            type=\"text\" \n            label=\"Titlu\"\n            validators={[VALIDATOR_REQUIRE()]} \n            errorText=\"Trebuie introdus un titlu valid.\" \n            onInput={inputHandler}\n            value={formState.inputs.title.value}\n            valid={formState.inputs.title.isValid}/>\n        <Input \n            id=\"descriere\" \n            element=\"textarea\"\n            label=\"Descriere\"\n            validators={[VALIDATOR_MINLENGTH(1)]} \n            errorText=\"Trebuie adaugata o descriere scurta.\" \n            onInput={inputHandler}\n            value={formState.inputs.descriere.value}\n            valid={formState.inputs.descriere.isValid}/>\n        <Button type=\"submit\" disabled={!formState.isValid}>RESCAN</Button>\n    </form> \n    </React.Fragment>\n    );\n};\n\nexport default UpdateScan;"]},"metadata":{},"sourceType":"module"}