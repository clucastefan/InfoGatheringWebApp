{"ast":null,"code":"var _jsxFileName = \"/home/cluca/Documents/Licenta/WebApplication/frontend/src/scans/pages/UpdateScan.js\";\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport './ScanForm.css';\nconst DUMMY_SCANS = [{\n  id: \"scan1\",\n  titlu: \"Scan rutina\",\n  descriere: \"Scaneaza site-ul dupa ultimul commit in productie dd/mm/yyyy\",\n  addr: \"192.168.0.1\",\n  tipScan: \"WEB-SCAN\",\n  creator: \"utilizator1\"\n}, {\n  id: \"scan2\",\n  titlu: \"Scan rutina\",\n  descriere: \"Scaneaza site-ul dupa ultimul commit in productie dd/mm/yyyy\",\n  addr: \"192.168.0.1\",\n  tipScan: \"WEB-SCAN\",\n  creator: \"utilizator2\"\n}];\n\nconst UpdateScan = () => {\n  const scanId = useParams().scanId;\n  const identifiedScan = DUMMY_SCANS.find(p => p.id === scanId);\n  const [formState, inputHandler] = useForm({\n    title: {\n      value: identifiedScan.titlu,\n      isValid: true\n    },\n    descriere: {\n      value: identifiedScan.descriere,\n      isValid: true\n    },\n    ipdns: {\n      value: identifiedScan.addr,\n      isValid: true\n    },\n    tipScan: {\n      value: identifiedScan.tipScan,\n      isValid: true\n    }\n  }, true);\n\n  const scanUpdateSubmitHandler = event => {\n    event.preventDefault();\n    console.log(formState.inputs);\n  };\n\n  if (!identifiedScan) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 16\n      }\n    }, \"Nu s-a putut gasi raportul respectiv\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"place-form\",\n    onSubmit: scanUpdateSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"ipdns\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, formState.inputs.ipdns.value, \" - RAPORT\"), /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Titlu\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Trebuie introdus un titlu valid.\",\n    onInput: inputHandler,\n    value: formState.inputs.title.value,\n    valid: formState.inputs.title.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"descriere\",\n    element: \"textarea\",\n    label: \"Descriere\",\n    validators: [VALIDATOR_MINLENGTH(1)],\n    errorText: \"Trebuie adaugata o descriere scurta.\",\n    onInput: inputHandler,\n    value: formState.inputs.descriere.value,\n    valid: formState.inputs.descriere.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"RESCAN\"));\n};\n\nexport default UpdateScan;","map":{"version":3,"sources":["/home/cluca/Documents/Licenta/WebApplication/frontend/src/scans/pages/UpdateScan.js"],"names":["React","useParams","Input","Button","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","DUMMY_SCANS","id","titlu","descriere","addr","tipScan","creator","UpdateScan","scanId","identifiedScan","find","p","formState","inputHandler","title","value","isValid","ipdns","scanUpdateSubmitHandler","event","preventDefault","console","log","inputs"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport './ScanForm.css'\n\n\nconst DUMMY_SCANS = [\n    {\n        id: \"scan1\",\n        titlu: \"Scan rutina\",\n        descriere: \"Scaneaza site-ul dupa ultimul commit in productie dd/mm/yyyy\",\n        addr: \"192.168.0.1\",\n        tipScan: \"WEB-SCAN\",\n        creator: \"utilizator1\"\n\n    },\n    {\n        id: \"scan2\",\n        titlu: \"Scan rutina\",\n        descriere: \"Scaneaza site-ul dupa ultimul commit in productie dd/mm/yyyy\",\n        addr: \"192.168.0.1\",\n        tipScan: \"WEB-SCAN\",\n        creator: \"utilizator2\"\n\n    }\n\n]\n\nconst UpdateScan = () => {\n    const scanId = useParams().scanId;\n\n    const identifiedScan = DUMMY_SCANS.find(p => p.id === scanId);\n\n    const [formState, inputHandler] = useForm({\n        title: {\n            value: identifiedScan.titlu,\n            isValid: true\n        },\n        descriere: {\n            value: identifiedScan.descriere,\n            isValid: true\n        },\n        ipdns: {\n            value: identifiedScan.addr,\n            isValid: true\n        },\n        tipScan: {\n            value: identifiedScan.tipScan,\n            isValid: true\n        }     \n    },true);\n\n    const scanUpdateSubmitHandler = event => {\n        event.preventDefault();\n        console.log(formState.inputs);\n    };\n\n    if(!identifiedScan){\n        return <div className=\"center\">Nu s-a putut gasi raportul respectiv</div>\n    }\n\n    return <form className=\"place-form\" onSubmit={scanUpdateSubmitHandler}>\n        <label className=\"ipdns\">{(formState.inputs.ipdns.value)} - RAPORT</label>\n        <Input \n            id=\"title\" \n            element=\"input\" \n            type=\"text\" \n            label=\"Titlu\"\n            validators={[VALIDATOR_REQUIRE()]} \n            errorText=\"Trebuie introdus un titlu valid.\" \n            onInput={inputHandler}\n            value={formState.inputs.title.value}\n            valid={formState.inputs.title.isValid}/>\n        <Input \n            id=\"descriere\" \n            element=\"textarea\"\n            label=\"Descriere\"\n            validators={[VALIDATOR_MINLENGTH(1)]} \n            errorText=\"Trebuie adaugata o descriere scurta.\" \n            onInput={inputHandler}\n            value={formState.inputs.descriere.value}\n            valid={formState.inputs.descriere.isValid}/>\n        <Button type=\"submit\" disabled={!formState.isValid}>RESCAN</Button>\n    </form>\n};\n\nexport default UpdateScan;"]},"metadata":{},"sourceType":"module"}