{"ast":null,"code":"var _jsxFileName = \"/home/cluca/Documents/Licenta/WebApplication/frontend/src/scans/pages/NewScan.js\";\nimport React, { useCallback, useReducer } from 'react';\nimport './NewScan.css';\nimport Input from '../../shared/components/FormElements/Input';\nimport { VALIDATOR_IPDNS, VALIDATOR_REQUIRE } from '../../shared/util/validators';\nimport Button from '../../shared/components/FormElements/Button';\n\nconst formReducer = (state, action) => {\n  switch (action, type) {\n    case 'INPUT_CHANGE':\n      let formIsValid = true;\n\n      for (const inputId in state.inputs) {\n        if (inputId === action.inputId) {\n          formIsValid = formIsValid && action.isValid;\n        } else {\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\n        }\n      }\n\n      return { ...state,\n        inputs: { ...state.inputs,\n          [action.inputId]: {\n            value: action.value,\n            isValid: action.isValid\n          }\n        },\n        isValid: formIsValid\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst NewScan = () => {\n  const [formState, dispatch] = useReducer(formReducer, {\n    inputs: {\n      title: {\n        value: '',\n        isValid: false\n      },\n      ipdns: {\n        value: '',\n        isValid: false\n      }\n    },\n    isValid: false\n  });\n  const inputHandler = useCallback((id, value, isValid) => {\n    dispatch({\n      type: 'INPUT_CHANGE',\n      value: value,\n      isValid: isValid,\n      inputId: id\n    });\n  }, []);\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"place-form\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Titlu\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Te rog sa introduci un titlu valid.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"ipdns\",\n    element: \"input\",\n    type: \"text\",\n    label: \"IP/DNS\",\n    validators: [VALIDATOR_IPDNS()],\n    errorText: \"Te rog sa introduci o adresa IP sau DNS valida.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }, \"START SCAN\"));\n};\n\nexport default NewScan;","map":{"version":3,"sources":["/home/cluca/Documents/Licenta/WebApplication/frontend/src/scans/pages/NewScan.js"],"names":["React","useCallback","useReducer","Input","VALIDATOR_IPDNS","VALIDATOR_REQUIRE","Button","formReducer","state","action","type","formIsValid","inputId","inputs","isValid","value","NewScan","formState","dispatch","title","ipdns","inputHandler","id"],"mappings":"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","sourcesContent":["import React, { useCallback, useReducer } from 'react';\n\nimport './NewScan.css'\nimport Input from '../../shared/components/FormElements/Input';\nimport { VALIDATOR_IPDNS, VALIDATOR_REQUIRE } from '../../shared/util/validators';\nimport Button from '../../shared/components/FormElements/Button';\n\nconst formReducer = (state, action) => {\n    switch(action,type){\n        case 'INPUT_CHANGE':\n            let formIsValid = true;\n            for(const inputId in state.inputs){\n                if(inputId === action.inputId){\n                    formIsValid = formIsValid && action.isValid;\n                }\n                else {\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\n                }\n            }\n            return {\n                ...state,\n                inputs: {\n                    ...state.inputs,\n                    [action.inputId]: {\n                        value: action.value,\n                        isValid: action.isValid\n                    }\n                },\n                isValid: formIsValid\n            };\n        default:\n            return state;\n    }\n};\n\nconst NewScan = () => {\n    const [formState, dispatch] = useReducer(formReducer, {\n        inputs: {\n            title: {\n                value: '',\n                isValid: false\n            },\n            ipdns: {\n                value: '',\n                isValid: false\n            }\n        },\n        isValid: false\n    });\n\n    const inputHandler = useCallback((id, value, isValid) => {\n        dispatch({type: 'INPUT_CHANGE', value: value, isValid: isValid, inputId: id});\n    }, []);\n\n    return <form className=\"place-form\">\n        <Input \n            id=\"title\"\n            element=\"input\" \n            type=\"text\" label=\"Titlu\" \n            validators={[VALIDATOR_REQUIRE()]} \n            errorText=\"Te rog sa introduci un titlu valid.\"\n            onInput={inputHandler}/>\n\n        <Input \n            id=\"ipdns\"\n            element=\"input\" \n            type=\"text\" label=\"IP/DNS\" \n            validators={[VALIDATOR_IPDNS()]} \n            errorText=\"Te rog sa introduci o adresa IP sau DNS valida.\"\n            onInput={inputHandler}/>\n        <Button type=\"submit\" disabled={!formState.isValid}>START SCAN</Button>\n    </form>\n};\n\nexport default NewScan;"]},"metadata":{},"sourceType":"module"}