{"ast":null,"code":"var _jsxFileName = \"/home/cluca/Documents/Licenta/WebApplication/frontend/src/main/pages/Auth.js\";\nimport React, { useState, useContext } from 'react';\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './Auth.css';\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const [formState, inputHandler, setFormData] = useForm({\n    email: {\n      value: '',\n      isValid: false\n    },\n    password: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData({ ...formState.inputs,\n        name: undefined\n      }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n    } else {\n      setFormData({ ...formState.inputs,\n        name: {\n          value: '',\n          isValid: false\n        }\n      }, false);\n    }\n\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const authSubmiteHandler = async event => {\n    event.preventDefault();\n\n    if (isLoginMode) {} else {\n      try {\n        const response = await fetch('http://localhost:5000/api/users/signup', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            name: formState.inputs.name.value,\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value\n          })\n        });\n        const responseData = await response.json();\n        console.log(responseData);\n      } catch (err) {\n        console.log(err);\n      }\n    }\n\n    auth.login();\n  };\n\n  return /*#__PURE__*/React.createElement(Card, {\n    className: \"authentication\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, \"Login required\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: authSubmiteHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, !isLoginMode && /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"name\",\n    type: \"text\",\n    label: \"Username\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Trebuie sa alegi un nume de utilizator.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"email\",\n    type: \"email\",\n    label: \"E-Mail\",\n    validators: [VALIDATOR_EMAIL()],\n    errorText: \"Trebuie sa introduci o adresa de email valida.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"password\",\n    type: \"password\",\n    label: \"Password\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Parola trebuie sa aiba minim 5 caractere.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, isLoginMode ? 'LOGIN' : 'SIGNUP')), /*#__PURE__*/React.createElement(Button, {\n    danger: true,\n    onClick: switchModeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }\n  }, \"SWITCH TO \", isLoginMode ? 'SIGNUP' : 'LOGIN'));\n};\n\nexport default Auth;","map":{"version":3,"sources":["/home/cluca/Documents/Licenta/WebApplication/frontend/src/main/pages/Auth.js"],"names":["React","useState","useContext","Card","Input","Button","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","useForm","AuthContext","Auth","auth","isLoginMode","setIsLoginMode","formState","inputHandler","setFormData","email","value","isValid","password","switchModeHandler","inputs","name","undefined","prevMode","authSubmiteHandler","event","preventDefault","response","fetch","method","headers","body","JSON","stringify","responseData","json","console","log","err","login"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,QAA4C,OAA5C;AAEA,OAAOC,IAAP,MAAiB,yCAAjB;AACA,OAAOC,KAAP,MAAkB,4CAAlB;AACA,OAAOC,MAAP,MAAmB,6CAAnB;AACA,SAAQC,eAAR,EAAyBC,mBAAzB,EAA8CC,iBAA9C,QAAsE,8BAAtE;AACA,SAASC,OAAT,QAAwB,8BAAxB;AACA,SAASC,WAAT,QAA4B,mCAA5B;AACA,OAAO,YAAP;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAMC,IAAI,GAAGV,UAAU,CAACQ,WAAD,CAAvB;AAEA,QAAM,CAACG,WAAD,EAAcC,cAAd,IAAgCb,QAAQ,CAAC,IAAD,CAA9C;AAEA,QAAM,CAACc,SAAD,EAAYC,YAAZ,EAA0BC,WAA1B,IAAyCR,OAAO,CAAC;AACnDS,IAAAA,KAAK,EAAE;AACHC,MAAAA,KAAK,EAAE,EADJ;AAEHC,MAAAA,OAAO,EAAE;AAFN,KAD4C;AAKnDC,IAAAA,QAAQ,EAAE;AACNF,MAAAA,KAAK,EAAE,EADD;AAENC,MAAAA,OAAO,EAAE;AAFH;AALyC,GAAD,EASnD,KATmD,CAAtD;;AAWA,QAAME,iBAAiB,GAAG,MAAM;AAC5B,QAAG,CAACT,WAAJ,EAAgB;AACZI,MAAAA,WAAW,CAAC,EACR,GAAGF,SAAS,CAACQ,MADL;AAERC,QAAAA,IAAI,EAAEC;AAFE,OAAD,EAGRV,SAAS,CAACQ,MAAV,CAAiBL,KAAjB,CAAuBE,OAAvB,IAAkCL,SAAS,CAACQ,MAAV,CAAiBF,QAAjB,CAA0BD,OAHpD,CAAX;AAIH,KALD,MAMK;AACDH,MAAAA,WAAW,CAAC,EACR,GAAGF,SAAS,CAACQ,MADL;AAERC,QAAAA,IAAI,EAAG;AACHL,UAAAA,KAAK,EAAE,EADJ;AAEHC,UAAAA,OAAO,EAAE;AAFN;AAFC,OAAD,EAMR,KANQ,CAAX;AAOH;;AACDN,IAAAA,cAAc,CAACY,QAAQ,IAAI,CAACA,QAAd,CAAd;AACH,GAjBD;;AAmBA,QAAMC,kBAAkB,GAAG,MAAMC,KAAN,IAAe;AACtCA,IAAAA,KAAK,CAACC,cAAN;;AAEA,QAAGhB,WAAH,EAAe,CAEd,CAFD,MAEO;AAEH,UAAI;AACA,cAAMiB,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAD,EAA2C;AACvEC,UAAAA,MAAM,EAAE,MAD+D;AAEvEC,UAAAA,OAAO,EAAE;AACL,4BAAgB;AADX,WAF8D;AAKvEC,UAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACjBZ,YAAAA,IAAI,EAAET,SAAS,CAACQ,MAAV,CAAiBC,IAAjB,CAAsBL,KADX;AAEjBD,YAAAA,KAAK,EAAEH,SAAS,CAACQ,MAAV,CAAiBL,KAAjB,CAAuBC,KAFb;AAGjBE,YAAAA,QAAQ,EAAEN,SAAS,CAACQ,MAAV,CAAiBF,QAAjB,CAA0BF;AAHnB,WAAf;AALiE,SAA3C,CAA5B;AAYJ,cAAMkB,YAAY,GAAG,MAAMP,QAAQ,CAACQ,IAAT,EAA3B;AAEAC,QAAAA,OAAO,CAACC,GAAR,CAAYH,YAAZ;AAEC,OAjBD,CAiBE,OAAOI,GAAP,EAAW;AACTF,QAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACH;AACJ;;AAGD7B,IAAAA,IAAI,CAAC8B,KAAL;AACH,GA/BD;;AAiCA,sBAAS,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAC,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADK,eAEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFK,eAGL;AAAM,IAAA,QAAQ,EAAEf,kBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACK,CAACd,WAAD,iBACG,oBAAC,KAAD;AACI,IAAA,OAAO,EAAC,OADZ;AAEI,IAAA,EAAE,EAAC,MAFP;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,KAAK,EAAC,UAJV;AAKI,IAAA,UAAU,EAAE,CAACL,iBAAiB,EAAlB,CALhB;AAMI,IAAA,SAAS,EAAC,yCANd;AAOI,IAAA,OAAO,EAAEQ,YAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFR,eAWI,oBAAC,KAAD;AACI,IAAA,OAAO,EAAC,OADZ;AAEI,IAAA,EAAE,EAAC,OAFP;AAGI,IAAA,IAAI,EAAC,OAHT;AAII,IAAA,KAAK,EAAC,QAJV;AAKI,IAAA,UAAU,EAAE,CAACV,eAAe,EAAhB,CALhB;AAMI,IAAA,SAAS,EAAC,gDANd;AAOI,IAAA,OAAO,EAAEU,YAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXJ,eAmBI,oBAAC,KAAD;AACI,IAAA,OAAO,EAAC,OADZ;AAEI,IAAA,EAAE,EAAC,UAFP;AAGI,IAAA,IAAI,EAAC,UAHT;AAII,IAAA,KAAK,EAAC,UAJV;AAKI,IAAA,UAAU,EAAE,CAACT,mBAAmB,CAAC,CAAD,CAApB,CALhB;AAMI,IAAA,SAAS,EAAC,2CANd;AAOI,IAAA,OAAO,EAAES,YAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAnBJ,eA2BI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,QAAQ,EAAE,CAACD,SAAS,CAACK,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKP,WAAW,GAAG,OAAH,GAAa,QAD7B,CA3BJ,CAHK,eAkCD,oBAAC,MAAD;AAAQ,IAAA,MAAM,MAAd;AAAe,IAAA,OAAO,EAAES,iBAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACeT,WAAW,GAAG,QAAH,GAAc,OADxC,CAlCC,CAAT;AAsCH,CA1GD;;AA4GA,eAAeF,IAAf","sourcesContent":["import React, { useState, useContext } from 'react'\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button'\nimport {VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport './Auth.css'\n\nconst Auth = () => {\n    const auth = useContext(AuthContext);\n\n    const [isLoginMode, setIsLoginMode] = useState(true);\n\n    const [formState, inputHandler, setFormData] = useForm({\n        email: {\n            value: '',\n            isValid: false\n        },\n        password: {\n            value: '',\n            isValid: false\n        }\n    }, false);\n\n    const switchModeHandler = () => {\n        if(!isLoginMode){\n            setFormData({\n                ...formState.inputs,\n                name: undefined\n            }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n        }\n        else {\n            setFormData({\n                ...formState.inputs,\n                name : {\n                    value: '',\n                    isValid: false\n                }\n            }, false)\n        }\n        setIsLoginMode(prevMode => !prevMode);\n    };\n\n    const authSubmiteHandler = async event => {\n        event.preventDefault();\n        \n        if(isLoginMode){\n\n        } else {\n\n            try {\n                const response = await fetch('http://localhost:5000/api/users/signup', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    name: formState.inputs.name.value,\n                    email: formState.inputs.email.value,\n                    password: formState.inputs.password.value\n                })\n            });\n\n            const responseData = await response.json();\n\n            console.log(responseData);\n\n            } catch (err){\n                console.log(err);\n            }\n        }\n        \n\n        auth.login();\n    };\n\n    return ( <Card className=\"authentication\">\n        <h2>Login required</h2>\n        <hr />\n        <form onSubmit={authSubmiteHandler}>\n            {!isLoginMode && (\n                <Input\n                    element=\"input\"\n                    id=\"name\"\n                    type=\"text\"\n                    label=\"Username\"\n                    validators={[VALIDATOR_REQUIRE()]}\n                    errorText=\"Trebuie sa alegi un nume de utilizator.\"\n                    onInput={inputHandler}/>\n            )}\n            <Input \n                element=\"input\" \n                id=\"email\" \n                type=\"email\"\n                label=\"E-Mail\" \n                validators={[VALIDATOR_EMAIL()]}\n                errorText=\"Trebuie sa introduci o adresa de email valida.\"\n                onInput={inputHandler}/>\n            <Input \n                element=\"input\" \n                id=\"password\" \n                type=\"password\"\n                label=\"Password\" \n                validators={[VALIDATOR_MINLENGTH(5)]}\n                errorText=\"Parola trebuie sa aiba minim 5 caractere.\"\n                onInput={inputHandler}/>\n            <Button type=\"submit\" disabled={!formState.isValid}>\n                {isLoginMode ? 'LOGIN' : 'SIGNUP'}\n            </Button>\n            </form>\n            <Button danger onClick={switchModeHandler}>\n                SWITCH TO {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n            </Button>\n        </Card> );\n};\n\nexport default Auth;"]},"metadata":{},"sourceType":"module"}