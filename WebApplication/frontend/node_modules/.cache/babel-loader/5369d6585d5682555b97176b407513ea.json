{"ast":null,"code":"var _jsxFileName = \"/home/cluca/Documents/Licenta/WebApplication/frontend/src/scans/pages/UserScan.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport ScanList from '../components/ScanList';\nimport { useHttpClient } from '../../shared/context/http-hook';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\n\nconst UserScans = () => {\n  const [loadedScans, setLoadedScans] = useState();\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const userId = useParams().userId;\n  useEffect(() => {\n    const fetchScans = async () => {\n      try {\n        const responseData = await sendRequest(`http://localhost:5000/api/reports/${userId}/myscans`);\n        setLoadedScans(responseData.scan);\n      } catch (err) {}\n    };\n  }, [sendRequest, userId]);\n  fetchScans();\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }\n  }), isLoading && /*#__PURE__*/React.createElement(\"div\", {\n    class: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n    asOverlay: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 49\n    }\n  })), !isLoading && loadedScans && /*#__PURE__*/React.createElement(ScanList, {\n    items: loadedScans,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 43\n    }\n  }));\n};\n\nexport default UserScans;","map":{"version":3,"sources":["/home/cluca/Documents/Licenta/WebApplication/frontend/src/scans/pages/UserScan.js"],"names":["React","useEffect","useState","useParams","ScanList","useHttpClient","ErrorModal","LoadingSpinner","UserScans","loadedScans","setLoadedScans","isLoading","error","sendRequest","clearError","userId","fetchScans","responseData","scan","err"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA0BC,QAA1B,QAA0C,OAA1C;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,aAAT,QAA8B,gCAA9B;AACA,OAAOC,UAAP,MAAuB,+CAAvB;AACA,OAAOC,cAAP,MAA2B,mDAA3B;;AAGA,MAAMC,SAAS,GAAG,MAAM;AACpB,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCR,QAAQ,EAA9C;AACA,QAAM;AAACS,IAAAA,SAAD;AAAYC,IAAAA,KAAZ;AAAmBC,IAAAA,WAAnB;AAAgCC,IAAAA;AAAhC,MAA8CT,aAAa,EAAjE;AAEA,QAAMU,MAAM,GAAGZ,SAAS,GAAGY,MAA3B;AAEAd,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMe,UAAU,GAAG,YAAY;AAC3B,UAAI;AACA,cAAMC,YAAY,GAAG,MAAMJ,WAAW,CAAE,qCAAoCE,MAAO,UAA7C,CAAtC;AACAL,QAAAA,cAAc,CAACO,YAAY,CAACC,IAAd,CAAd;AACH,OAHD,CAGE,OAAOC,GAAP,EAAY,CAEb;AACJ,KAPD;AAQH,GATQ,EASN,CAACN,WAAD,EAAcE,MAAd,CATM,CAAT;AAWAC,EAAAA,UAAU;AACV,sBACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAEJ,KAAnB;AAA0B,IAAA,OAAO,EAAEE,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAEKH,SAAS,iBAAM;AAAK,IAAA,KAAK,EAAC,QAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAoB,oBAAC,cAAD;AAAgB,IAAA,SAAS,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAApB,CAFpB,EAGK,CAACA,SAAD,IAAcF,WAAd,iBAA6B,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAEA,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHlC,CADJ;AAMH,CAxBD;;AA0BA,eAAeD,SAAf","sourcesContent":["import React, { useEffect,useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport ScanList from '../components/ScanList';\nimport { useHttpClient } from '../../shared/context/http-hook';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\n\n\nconst UserScans = () => {\n    const [loadedScans, setLoadedScans] = useState();\n    const {isLoading, error, sendRequest, clearError} = useHttpClient();\n\n    const userId = useParams().userId;\n\n    useEffect(() => {\n        const fetchScans = async () => {\n            try {\n                const responseData = await sendRequest(`http://localhost:5000/api/reports/${userId}/myscans`);\n                setLoadedScans(responseData.scan)\n            } catch (err) {\n\n            }\n        };\n    }, [sendRequest, userId]);\n\n    fetchScans();\n    return (\n        <React.Fragment>\n            <ErrorModal error={error} onClear={clearError}/>\n            {isLoading && ( <div class=\"center\"><LoadingSpinner asOverlay/></div> )}\n            {!isLoading && loadedScans && <ScanList items={loadedScans}/>}\n        </React.Fragment> );\n};\n\nexport default UserScans;"]},"metadata":{},"sourceType":"module"}