{"ast":null,"code":"import { useState, useCallback, useRef, useEffect } from 'react';\nexport const useHttpClient = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const activeHttpRequest = useRef([]);\n  const sendRequest = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\n    setIsLoading(true);\n    const httpAbortCtrl = new AbortController();\n    activeHttpRequest.current.push(httpAbortCtrl);\n\n    try {\n      const response = await fetch(url, {\n        method,\n        body,\n        headers,\n        signal: httpAbortCtrl.signal\n      });\n      const responseData = await response.json();\n\n      if (!response.ok) {\n        throw new Error(responseData.message);\n      }\n\n      setIsLoading(false);\n      return responseData;\n    } catch (err) {\n      setError(err.message);\n      setIsLoading(false);\n      throw err;\n    }\n  }, []);\n\n  const clearError = () => {\n    setError(null);\n  };\n\n  useEffect(() => {\n    return () => {\n      activeHttpRequest.current.forEach(abortCtrl => abortCtrl.abortCtrl());\n    };\n  }, []);\n  return {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  };\n};","map":{"version":3,"sources":["/home/cluca/Documents/Licenta/WebApplication/frontend/src/shared/context/http-hook.js"],"names":["useState","useCallback","useRef","useEffect","useHttpClient","isLoading","setIsLoading","error","setError","activeHttpRequest","sendRequest","url","method","body","headers","httpAbortCtrl","AbortController","current","push","response","fetch","signal","responseData","json","ok","Error","message","err","clearError","forEach","abortCtrl"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,WAAnB,EAAgCC,MAAhC,EAAwCC,SAAxC,QAAyD,OAAzD;AAEA,OAAO,MAAMC,aAAa,GAAG,MAAM;AAC/B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAqBR,QAAQ,CAAC,KAAD,CAAnC;AAEA,QAAMS,iBAAiB,GAAGP,MAAM,CAAC,EAAD,CAAhC;AAEA,QAAMQ,WAAW,GAAGT,WAAW,CAAC,OAAOU,GAAP,EAAWC,MAAM,GAAG,KAApB,EAA2BC,IAAI,GAAG,IAAlC,EAAwCC,OAAO,GAAG,EAAlD,KAAyD;AACrFR,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMS,aAAa,GAAG,IAAIC,eAAJ,EAAtB;AACAP,IAAAA,iBAAiB,CAACQ,OAAlB,CAA0BC,IAA1B,CAA+BH,aAA/B;;AACA,QAAI;AACA,YAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACT,GAAD,EAAM;AAC9BC,QAAAA,MAD8B;AAE9BC,QAAAA,IAF8B;AAG9BC,QAAAA,OAH8B;AAI9BO,QAAAA,MAAM,EAAEN,aAAa,CAACM;AAJQ,OAAN,CAA5B;AAOA,YAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAA3B;;AACA,UAAG,CAACJ,QAAQ,CAACK,EAAb,EAAgB;AACZ,cAAM,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAvB,CAAN;AACH;;AACDpB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,aAAOgB,YAAP;AACH,KAdD,CAcE,OAAOK,GAAP,EAAY;AACVnB,MAAAA,QAAQ,CAACmB,GAAG,CAACD,OAAL,CAAR;AACApB,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,YAAMqB,GAAN;AACH;AACJ,GAvB8B,EAuB5B,EAvB4B,CAA/B;;AA2BA,QAAMC,UAAU,GAAG,MAAM;AACrBpB,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACH,GAFD;;AAIAL,EAAAA,SAAS,CAAC,MAAM;AACZ,WAAO,MAAM;AACTM,MAAAA,iBAAiB,CAACQ,OAAlB,CAA0BY,OAA1B,CAAkCC,SAAS,IAAIA,SAAS,CAACA,SAAV,EAA/C;AACH,KAFD;AAGH,GAJQ,EAIN,EAJM,CAAT;AAMA,SAAO;AAACzB,IAAAA,SAAD;AAAYE,IAAAA,KAAZ;AAAmBG,IAAAA,WAAnB;AAAgCkB,IAAAA;AAAhC,GAAP;AACH,CA5CM","sourcesContent":["import { useState, useCallback, useRef, useEffect } from 'react';\n\nexport const useHttpClient = () => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError]  = useState(false);\n\n    const activeHttpRequest = useRef([])\n\n    const sendRequest = useCallback(async (url,method = 'GET', body = null, headers = {}) => {\n        setIsLoading(true);\n        const httpAbortCtrl = new AbortController();\n        activeHttpRequest.current.push(httpAbortCtrl);\n        try {\n            const response = await fetch(url, {\n                method,\n                body,\n                headers,\n                signal: httpAbortCtrl.signal\n            });\n    \n            const responseData = await response.json();\n            if(!response.ok){\n                throw new Error(responseData.message);\n            }\n            setIsLoading(false);\n            return responseData;\n        } catch (err) {\n            setError(err.message);\n            setIsLoading(false);\n            throw err;\n        }\n    }, []);\n\n\n\n    const clearError = () => {\n        setError(null);\n    };\n\n    useEffect(() => {\n        return () => {\n            activeHttpRequest.current.forEach(abortCtrl => abortCtrl.abortCtrl());\n        };\n    }, []);\n\n    return {isLoading, error, sendRequest, clearError}\n};"]},"metadata":{},"sourceType":"module"}