{"ast":null,"code":"var _jsxFileName = \"/home/cluca/Documents/Licenta/WebApplication/frontend/src/main/pages/Auth.js\";\nimport React, { useState } from 'react';\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport './Auth.css';\n\nconst Auth = () => {\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const [formState, inputHandler, setFormData] = useForm({\n    email: {\n      value: '',\n      isValid: false\n    },\n    password: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData({\n        name: undefined\n      }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n    } else {\n      setFormData({ ...formState.inputs,\n        name: {\n          value: '',\n          isValid: false\n        }\n      }, false);\n    }\n\n    setIsLoginMode(prevMode => !prevMode);\n  };\n\n  const authSubmiteHandler = event => {\n    event.preventDefault();\n    console.log(formState.inputs);\n  };\n\n  return /*#__PURE__*/React.createElement(Card, {\n    className: \"authentication\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 14\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }\n  }, \"Login required\"), /*#__PURE__*/React.createElement(\"hr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: authSubmiteHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, !isLoginMode && /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"name\",\n    type: \"text\",\n    label: \"Username\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Trebuie sa alegi un nume de utilizator.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"email\",\n    type: \"email\",\n    label: \"E-Mail\",\n    validators: [VALIDATOR_EMAIL()],\n    errorText: \"Trebuie sa introduci o adresa de email valida.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    element: \"input\",\n    id: \"password\",\n    type: \"password\",\n    label: \"Password\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Parola trebuie sa aiba minim 5 caractere.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, isLoginMode ? 'LOGIN' : 'SIGNUP')), /*#__PURE__*/React.createElement(Button, {\n    danger: true,\n    onClick: switchModeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }\n  }, isLoginMode ? 'SIGNUP' : 'LOGIN'));\n};\n\nexport default Auth;","map":{"version":3,"sources":["/home/cluca/Documents/Licenta/WebApplication/frontend/src/main/pages/Auth.js"],"names":["React","useState","Card","Input","Button","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","useForm","Auth","isLoginMode","setIsLoginMode","formState","inputHandler","setFormData","email","value","isValid","password","switchModeHandler","name","undefined","inputs","prevMode","authSubmiteHandler","event","preventDefault","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button'\nimport {VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE} from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport './Auth.css'\n\nconst Auth = () => {\n    const [isLoginMode, setIsLoginMode] = useState(true);\n\n    const [formState, inputHandler, setFormData] = useForm({\n        email: {\n            value: '',\n            isValid: false\n        },\n        password: {\n            value: '',\n            isValid: false\n        }\n    }, false);\n\n    const switchModeHandler = () => {\n        if(!isLoginMode){\n            setFormData({\n                name: undefined\n            }, formState.inputs.email.isValid && formState.inputs.password.isValid);\n        }\n        else {\n            setFormData({\n                ...formState.inputs,\n                name : {\n                    value: '',\n                    isValid: false\n                }\n            }, false)\n        }\n        setIsLoginMode(prevMode => !prevMode);\n    };\n\n    const authSubmiteHandler = event => {\n        event.preventDefault();\n        console.log(formState.inputs)\n    };\n\n    return ( <Card className=\"authentication\">\n        <h2>Login required</h2>\n        <hr />\n        <form onSubmit={authSubmiteHandler}>\n            {!isLoginMode && (\n                <Input\n                    element=\"input\"\n                    id=\"name\"\n                    type=\"text\"\n                    label=\"Username\"\n                    validators={[VALIDATOR_REQUIRE()]}\n                    errorText=\"Trebuie sa alegi un nume de utilizator.\"\n                    onInput={inputHandler}/>\n            )}\n            <Input \n                element=\"input\" \n                id=\"email\" \n                type=\"email\"\n                label=\"E-Mail\" \n                validators={[VALIDATOR_EMAIL()]}\n                errorText=\"Trebuie sa introduci o adresa de email valida.\"\n                onInput={inputHandler}/>\n            <Input \n                element=\"input\" \n                id=\"password\" \n                type=\"password\"\n                label=\"Password\" \n                validators={[VALIDATOR_MINLENGTH(5)]}\n                errorText=\"Parola trebuie sa aiba minim 5 caractere.\"\n                onInput={inputHandler}/>\n            <Button type=\"submit\" disabled={!formState.isValid}>\n                {isLoginMode ? 'LOGIN' : 'SIGNUP'}\n            </Button>\n            </form>\n            <Button danger onClick={switchModeHandler}>\n                {isLoginMode ? 'SIGNUP' : 'LOGIN'}\n            </Button>\n        </Card> );\n};\n\nexport default Auth;"]},"metadata":{},"sourceType":"module"}