{"ast":null,"code":"var _jsxFileName = \"/home/cluca/Documents/Licenta/WebApplication/frontend/src/scans/pages/UpdateScan.js\";\nimport React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport './ScanForm.css';\nimport Card from '../../shared/components/UIElements/Card';\nimport { useHttpClient } from '../../shared/context/http-hook';\n\nconst UpdateScan = () => {\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [loadedScan, setLoadedScan] = useState(); // const [isLoading, setIsLoading] = useState(true);\n\n  const scanId = useParams().scanId;\n  const userId = useParams().userId;\n  const [formState, inputHandler, setFormData] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    descriere: {\n      value: '',\n      isValid: false\n    },\n    ipdns: {\n      value: '',\n      isValid: false\n    },\n    tipScan: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  useEffect(() => {\n    const fetchScan = async () => {\n      try {\n        const responseData = await sendRequest(`http://localhost:5000/api/reports/${userId}/myscans/${scanid}`);\n        setLoadedScan(responseData.scan);\n        setFormData({\n          title: {\n            value: responseData.scan.titlu,\n            isValid: true\n          },\n          descriere: {\n            value: responseData.scan.descriere,\n            isValid: true\n          },\n          ipdns: {\n            value: responseData.scan.addr,\n            isValid: true\n          },\n          tipScan: {\n            value: responseData.scan.tipScan,\n            isValid: true\n          }\n        }, true);\n      } catch (err) {}\n    };\n\n    fetchScan();\n  }, [sendRequest, scanId, setFormData]);\n\n  const scanUpdateSubmitHandler = event => {\n    event.preventDefault();\n    console.log(formState.inputs);\n  };\n\n  if (!loadedScan) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }\n    }, \"Nu s-a putut gasi raportul respectiv\")));\n  }\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 13\n      }\n    }));\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"place-form\",\n    onSubmit: scanUpdateSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"ipdns\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"RAPORT: \", formState.inputs.ipdns.value), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"tipscan\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, \"TIP SCANARE: \", formState.inputs.tipScan.value), /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Titlu\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Trebuie introdus un titlu valid.\",\n    onInput: inputHandler,\n    value: formState.inputs.title.value,\n    valid: formState.inputs.title.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"descriere\",\n    element: \"textarea\",\n    label: \"Descriere\",\n    validators: [VALIDATOR_MINLENGTH(1)],\n    errorText: \"Trebuie adaugata o descriere scurta.\",\n    onInput: inputHandler,\n    value: formState.inputs.descriere.value,\n    valid: formState.inputs.descriere.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  }, \"RESCAN\"));\n};\n\nexport default UpdateScan;","map":{"version":3,"sources":["/home/cluca/Documents/Licenta/WebApplication/frontend/src/scans/pages/UpdateScan.js"],"names":["React","useEffect","useState","useParams","Input","Button","LoadingSpinner","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","Card","useHttpClient","UpdateScan","isLoading","error","sendRequest","clearError","loadedScan","setLoadedScan","scanId","userId","formState","inputHandler","setFormData","title","value","isValid","descriere","ipdns","tipScan","fetchScan","responseData","scanid","scan","titlu","addr","err","scanUpdateSubmitHandler","event","preventDefault","console","log","inputs"],"mappings":"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","sourcesContent":["import React, { useEffect,useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport './ScanForm.css'\nimport Card from '../../shared/components/UIElements/Card';\nimport { useHttpClient } from '../../shared/context/http-hook';\n\nconst UpdateScan = () => {\n    const {isLoading, error, sendRequest, clearError} = useHttpClient();\n    const[loadedScan, setLoadedScan] = useState();\n    // const [isLoading, setIsLoading] = useState(true);\n    const scanId = useParams().scanId;\n    const userId = useParams().userId;\n\n    const [formState, inputHandler, setFormData] = useForm({\n        title: {\n            value: '',\n            isValid: false\n        },\n        descriere: {\n            value: '',\n            isValid: false\n        },\n        ipdns: {\n            value: '',\n            isValid: false\n        },\n        tipScan: {\n            value: '',\n            isValid: false\n        }     \n    },false);\n\n    useEffect(() => {\n        const fetchScan = async () => {\n            try {\n                const responseData = await sendRequest(`http://localhost:5000/api/reports/${userId}/myscans/${scanid}`);\n                setLoadedScan(responseData.scan);\n                setFormData({\n                    title: {\n                        value: responseData.scan.titlu,\n                        isValid: true\n                    },\n                    descriere: {\n                        value: responseData.scan.descriere,\n                        isValid: true\n                    },\n                    ipdns: {\n                        value: responseData.scan.addr,\n                        isValid: true\n                    },\n                    tipScan: {\n                        value: responseData.scan.tipScan,\n                        isValid: true\n                    }\n                }, true);\n            } catch (err) {}\n        };\n        fetchScan();\n    }, [sendRequest, scanId, setFormData]);\n\n    const scanUpdateSubmitHandler = event => {\n        event.preventDefault();\n        console.log(formState.inputs);\n    };\n\n    if(!loadedScan){\n        return <div className=\"center\">\n            <Card>\n                <h2>Nu s-a putut gasi raportul respectiv</h2>\n            </Card>\n            </div>\n    }\n\n    if(isLoading){\n        return <div className=\"center\">\n            <LoadingSpinner/>\n            </div>\n    }\n\n    return (\n        <form className=\"place-form\" onSubmit={scanUpdateSubmitHandler}>\n        <label className=\"ipdns\">RAPORT: {(formState.inputs.ipdns.value)}</label>\n        <label className=\"tipscan\">TIP SCANARE: {(formState.inputs.tipScan.value)}</label>\n        <Input \n            id=\"title\" \n            element=\"input\" \n            type=\"text\" \n            label=\"Titlu\"\n            validators={[VALIDATOR_REQUIRE()]} \n            errorText=\"Trebuie introdus un titlu valid.\" \n            onInput={inputHandler}\n            value={formState.inputs.title.value}\n            valid={formState.inputs.title.isValid}/>\n        <Input \n            id=\"descriere\" \n            element=\"textarea\"\n            label=\"Descriere\"\n            validators={[VALIDATOR_MINLENGTH(1)]} \n            errorText=\"Trebuie adaugata o descriere scurta.\" \n            onInput={inputHandler}\n            value={formState.inputs.descriere.value}\n            valid={formState.inputs.descriere.isValid}/>\n        <Button type=\"submit\" disabled={!formState.isValid}>RESCAN</Button>\n    </form> \n    );\n};\n\nexport default UpdateScan;"]},"metadata":{},"sourceType":"module"}