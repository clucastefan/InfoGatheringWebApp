{"ast":null,"code":"var _jsxFileName = \"/home/cluca/Documents/Licenta/WebApplication/frontend/src/scans/pages/UpdateScan.js\";\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport './ScanForm.css';\nconst DUMMY_SCANS = [{\n  id: \"scan1\",\n  titlu: \"Scan rutina\",\n  descriere: \"Scaneaza site-ul dupa ultimul commit in productie dd/mm/yyyy\",\n  addr: \"192.168.0.1\",\n  tipScan: \"WEB-SCAN\",\n  creator: \"utilizator1\"\n}, {\n  id: \"scan2\",\n  titlu: \"Scan rutina\",\n  descriere: \"Scaneaza site-ul dupa ultimul commit in productie dd/mm/yyyy\",\n  addr: \"192.168.0.1\",\n  tipScan: \"WEB-SCAN\",\n  creator: \"utilizator2\"\n}];\n\nconst UpdateScan = () => {\n  const scanId = useParams().scanId;\n  const [formState, inputHandler, setFormData] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    descriere: {\n      value: '',\n      isValid: false\n    },\n    ipdns: {\n      value: '',\n      isValid: false\n    },\n    tipScan: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  const identifiedScan = DUMMY_SCANS.find(p => p.id === scanId);\n  useEffect(() => {\n    setFormData({\n      title: {\n        value: identifiedScan.title,\n        isValid: true\n      },\n      descriere: {\n        value: identifiedScan.descriere,\n        isValid: true\n      },\n      ipdns: {\n        value: identifiedScan.addr,\n        isValid: true\n      },\n      tipScan: {\n        value: identifiedScan.tipScan,\n        isValid: true\n      }\n    }, true);\n  }, [setFormData, identifiedScan]);\n\n  const scanUpdateSubmitHandler = event => {\n    event.preventDefault();\n    console.log(formState.inputs);\n  };\n\n  if (!identifiedScan) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 16\n      }\n    }, \"Nu s-a putut gasi raportul respectiv\");\n  }\n\n  if (!formState.inputs.title.value) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 16\n      }\n    }, \"Se incarca ...\");\n  }\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    className: \"place-form\",\n    onSubmit: scanUpdateSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    className: \"ipdns\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  }, \"RAPORT: \", formState.inputs.ipdns.value), /*#__PURE__*/React.createElement(\"label\", {\n    className: \"tipscan\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  }, \"TIP SCANARE: \", formState.inputs.tipScan.value), /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Titlu\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Trebuie introdus un titlu valid.\",\n    onInput: inputHandler,\n    value: formState.inputs.title.value,\n    valid: formState.inputs.title.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"descriere\",\n    element: \"textarea\",\n    label: \"Descriere\",\n    validators: [VALIDATOR_MINLENGTH(1)],\n    errorText: \"Trebuie adaugata o descriere scurta.\",\n    onInput: inputHandler,\n    value: formState.inputs.descriere.value,\n    valid: formState.inputs.descriere.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, \"RESCAN\"));\n};\n\nexport default UpdateScan;","map":{"version":3,"sources":["/home/cluca/Documents/Licenta/WebApplication/frontend/src/scans/pages/UpdateScan.js"],"names":["React","useEffect","useParams","Input","Button","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","DUMMY_SCANS","id","titlu","descriere","addr","tipScan","creator","UpdateScan","scanId","formState","inputHandler","setFormData","title","value","isValid","ipdns","identifiedScan","find","p","scanUpdateSubmitHandler","event","preventDefault","console","log","inputs"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport Input from '../../shared/components/FormElements/Input';\nimport Button from '../../shared/components/FormElements/Button';\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from '../../shared/util/validators';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport './ScanForm.css'\n\n\nconst DUMMY_SCANS = [\n    {\n        id: \"scan1\",\n        titlu: \"Scan rutina\",\n        descriere: \"Scaneaza site-ul dupa ultimul commit in productie dd/mm/yyyy\",\n        addr: \"192.168.0.1\",\n        tipScan: \"WEB-SCAN\",\n        creator: \"utilizator1\"\n\n    },\n    {\n        id: \"scan2\",\n        titlu: \"Scan rutina\",\n        descriere: \"Scaneaza site-ul dupa ultimul commit in productie dd/mm/yyyy\",\n        addr: \"192.168.0.1\",\n        tipScan: \"WEB-SCAN\",\n        creator: \"utilizator2\"\n\n    }\n\n]\n\nconst UpdateScan = () => {\n    const scanId = useParams().scanId;\n\n    const [formState, inputHandler, setFormData] = useForm({\n        title: {\n            value: '',\n            isValid: false\n        },\n        descriere: {\n            value: '',\n            isValid: false\n        },\n        ipdns: {\n            value: '',\n            isValid: false\n        },\n        tipScan: {\n            value: '',\n            isValid: false\n        }     \n    },false);\n\n    const identifiedScan = DUMMY_SCANS.find(p => p.id === scanId);\n\n    useEffect(() => {\n\n    setFormData({\n        title: {\n            value: identifiedScan.title,\n            isValid: true\n        },\n        descriere: {\n            value: identifiedScan.descriere,\n            isValid: true\n        },\n        ipdns: {\n            value: identifiedScan.addr,\n            isValid: true\n        },\n        tipScan: {\n            value: identifiedScan.tipScan,\n            isValid: true\n        }\n    }, true);\n\n    }, [setFormData,identifiedScan]);\n\n    const scanUpdateSubmitHandler = event => {\n        event.preventDefault();\n        console.log(formState.inputs);\n    };\n\n    if(!identifiedScan){\n        return <div className=\"center\">Nu s-a putut gasi raportul respectiv</div>\n    }\n\n    if(!formState.inputs.title.value){\n        return <div className=\"center\">Se incarca ...</div>\n    }\n\n    return (\n        <form className=\"place-form\" onSubmit={scanUpdateSubmitHandler}>\n        <label className=\"ipdns\">RAPORT: {(formState.inputs.ipdns.value)}</label>\n        <label className=\"tipscan\">TIP SCANARE: {(formState.inputs.tipScan.value)}</label>\n        <Input \n            id=\"title\" \n            element=\"input\" \n            type=\"text\" \n            label=\"Titlu\"\n            validators={[VALIDATOR_REQUIRE()]} \n            errorText=\"Trebuie introdus un titlu valid.\" \n            onInput={inputHandler}\n            value={formState.inputs.title.value}\n            valid={formState.inputs.title.isValid}/>\n        <Input \n            id=\"descriere\" \n            element=\"textarea\"\n            label=\"Descriere\"\n            validators={[VALIDATOR_MINLENGTH(1)]} \n            errorText=\"Trebuie adaugata o descriere scurta.\" \n            onInput={inputHandler}\n            value={formState.inputs.descriere.value}\n            valid={formState.inputs.descriere.isValid}/>\n        <Button type=\"submit\" disabled={!formState.isValid}>RESCAN</Button>\n    </form> \n    )\n};\n\nexport default UpdateScan;"]},"metadata":{},"sourceType":"module"}