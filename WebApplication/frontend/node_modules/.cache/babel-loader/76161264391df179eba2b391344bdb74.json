{"ast":null,"code":"var _jsxFileName = \"/home/cluca/Documents/Licenta/WebApplication/frontend/src/scans/pages/NewScan.js\";\nimport React, { useContext } from 'react';\nimport './ScanForm.css';\nimport Input from '../../shared/components/FormElements/Input';\nimport { VALIDATOR_IPDNS, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/util/validators';\nimport Button from '../../shared/components/FormElements/Button';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/context/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\n\nconst NewScan = () => {\n  const auth = useContext(AuthContext);\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [formState, inputHandler] = useForm({\n    title: {\n      value: '',\n      isValid: false\n    },\n    ipdns: {\n      value: '',\n      isValid: false\n    },\n    descriere: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n\n  const scanSubmitHandler = async event => {\n    event.preventDefault(); //var e = document.getElementById(\"tipScan\");\n    //var tipScanDropDown = e.options[e.selectedIndex].text;\n    //console.log(formState.inputs,tipScan);\n\n    try {\n      await sendRequest('http://localhost:5000/api/reports/', 'POST', JSON.stringify({\n        titlu: formState.inputs.titlu.value,\n        descriere: formState.inputs.descriere.value,\n        addr: formState.inputs.addr.value,\n        creator: auth.userId\n      }), {\n        'Content-Type': 'application/json'\n      });\n    } catch (err) {}\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(\"form\", {\n    className: \"place-form\",\n    onSubmit: scanSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 5\n    }\n  }, isLoading && /*#__PURE__*/React.createElement(LoadingSpinner, {\n    asOverlay: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 23\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Titlu\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Te rog sa introduci un titlu valid.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"ipdns\",\n    element: \"input\",\n    type: \"text\",\n    label: \"IP/DNS\",\n    validators: [VALIDATOR_IPDNS()],\n    errorText: \"Te rog sa introduci o adresa IP sau DNS valida.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, \"TIP SCANARE\"), /*#__PURE__*/React.createElement(\"select\", {\n    id: \"tipScan\",\n    name: \"selectList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"FULL_SCAN\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, \"FULL-SCAN\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"WEB_SCAN\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, \"WEB-SCAN\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"SERVER_SCAN\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, \"SERVER-SCAN\")), /*#__PURE__*/React.createElement(Input, {\n    id: \"descriere\",\n    element: \"textarea\",\n    type: \"text\",\n    label: \"Descriere\",\n    validators: [VALIDATOR_MINLENGTH(1)],\n    errorText: \"Trebuie sa adaugi o descriere scurta.\",\n    onInput: inputHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"START SCAN\")));\n};\n\nexport default NewScan;","map":{"version":3,"sources":["/home/cluca/Documents/Licenta/WebApplication/frontend/src/scans/pages/NewScan.js"],"names":["React","useContext","Input","VALIDATOR_IPDNS","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","Button","useForm","useHttpClient","AuthContext","ErrorModal","LoadingSpinner","NewScan","auth","isLoading","error","sendRequest","clearError","formState","inputHandler","title","value","isValid","ipdns","descriere","scanSubmitHandler","event","preventDefault","JSON","stringify","titlu","inputs","addr","creator","userId","err"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\n\nimport './ScanForm.css'\nimport Input from '../../shared/components/FormElements/Input';\nimport { VALIDATOR_IPDNS, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../../shared/util/validators';\nimport Button from '../../shared/components/FormElements/Button';\nimport { useForm } from '../../shared/hooks/form-hook';\nimport { useHttpClient } from '../../shared/context/http-hook';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\n\nconst NewScan = () => {\n    const auth = useContext(AuthContext);\n    const {isLoading, error, sendRequest, clearError} = useHttpClient();\n    const [formState, inputHandler] = useForm({\n        title: {\n            value: '',\n            isValid: false\n        },\n        ipdns: {\n            value: '',\n            isValid: false\n        },\n        descriere: {\n            value: '',\n            isValid: false\n        }\n    }, false);\n\n    const scanSubmitHandler = async event => {\n        event.preventDefault();\n        //var e = document.getElementById(\"tipScan\");\n        //var tipScanDropDown = e.options[e.selectedIndex].text;\n        //console.log(formState.inputs,tipScan);\n\n        try {\n            await sendRequest('http://localhost:5000/api/reports/', 'POST', JSON.stringify({\n                titlu: formState.inputs.titlu.value,\n                descriere: formState.inputs.descriere.value,\n                addr: formState.inputs.addr.value,\n                \n                creator: auth.userId,\n            }),\n            {\n                'Content-Type': 'application/json'\n            });\n        } catch (err) {}\n    };\n\n    return ( \n    <React.Fragment>\n    <ErrorModal error={error} onClear={clearError}/>\n    <form className=\"place-form\" onSubmit={scanSubmitHandler}>\n        {isLoading && <LoadingSpinner asOverlay />}\n        <Input \n            id=\"title\"\n            element=\"input\" \n            type=\"text\" label=\"Titlu\" \n            validators={[VALIDATOR_REQUIRE()]} \n            errorText=\"Te rog sa introduci un titlu valid.\"\n            onInput={inputHandler}/>\n\n        <Input \n            id=\"ipdns\"\n            element=\"input\" \n            type=\"text\" label=\"IP/DNS\" \n            validators={[VALIDATOR_IPDNS()]} \n            errorText=\"Te rog sa introduci o adresa IP sau DNS valida.\"\n            onInput={inputHandler}/>\n\n        <label>TIP SCANARE</label>\n        <select id=\"tipScan\" name=\"selectList\">\n        <option value=\"FULL_SCAN\">FULL-SCAN</option>\n        <option value=\"WEB_SCAN\">WEB-SCAN</option>\n        <option value=\"SERVER_SCAN\">SERVER-SCAN</option>\n        </select>\n\n        <Input \n            id=\"descriere\"\n            element=\"textarea\" \n            type=\"text\" label=\"Descriere\"\n            validators={[VALIDATOR_MINLENGTH(1)]}  \n            errorText=\"Trebuie sa adaugi o descriere scurta.\"\n            onInput={inputHandler}\n            />\n        \n        <Button type=\"submit\" disabled={!formState.isValid}>START SCAN</Button>\n    </form>\n    </React.Fragment> )\n};\n\nexport default NewScan;"]},"metadata":{},"sourceType":"module"}